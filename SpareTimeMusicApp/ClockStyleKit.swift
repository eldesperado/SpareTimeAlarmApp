//
//  ClockStyleKit.swift
//  SpareTimeAlarm
//
//  Created by Pham Nguyen Nhat Trung on 8/7/15.
//  Copyright (c) 2015 Mirum. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class ClockStyleKit : NSObject {

    //// Drawing Methods

    public class func drawClock(#seconds: CGFloat, minutes: CGFloat, hours: CGFloat, dateInWeek: String, dateInMonth: String) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor5 = UIColor(red: 0.098, green: 0.098, blue: 0.098, alpha: 1.000)
        let fillColor6 = UIColor(red: 0.202, green: 0.202, blue: 0.202, alpha: 1.000)
        let fillColor7 = UIColor(red: 0.991, green: 0.557, blue: 0.034, alpha: 1.000)
        let fillColor11 = UIColor(red: 0.875, green: 0.875, blue: 0.875, alpha: 1.000)
        let fillColor12 = UIColor(red: 0.358, green: 0.606, blue: 0.965, alpha: 1.000)
        let textForeground = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let textForeground2 = UIColor(red: 0.011, green: 0.011, blue: 0.011, alpha: 1.000)

        //// Image Declarations
        let image2 = UIImage(named: "image2.png")!

        //// Variable Declarations
        let secondArrowAngle: CGFloat = -(seconds / 60.0) * 360
        let minuteArrowAngle: CGFloat = (-(minutes / 60.0) + secondArrowAngle / 360.0 / 60.0) * 360
        let hourArrowAngle: CGFloat = ((hours <= 12 ? -hours : 24 - hours) / 12.0 + minuteArrowAngle / 360.0 / 12.0) * 360

        //// ClockInterface Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 9, 12)
        CGContextScaleCTM(context, 0.48, 0.48)

        let clockInterfacePath = UIBezierPath(rect: CGRectMake(0, 0, 632, 632))
        CGContextSaveGState(context)
        clockInterfacePath.addClip()
        image2.drawInRect(CGRectMake(0, 0, image2.size.width, image2.size.height))
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)


        //// DateGroup
        //// DateGroupBG
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip 9
        var clip9Path = UIBezierPath()
        clip9Path.moveToPoint(CGPointMake(215, 161))
        clip9Path.addCurveToPoint(CGPointMake(217, 159), controlPoint1: CGPointMake(215, 159.89), controlPoint2: CGPointMake(215.89, 159))
        clip9Path.addLineToPoint(CGPointMake(249, 159))
        clip9Path.addCurveToPoint(CGPointMake(251, 161), controlPoint1: CGPointMake(250.1, 159), controlPoint2: CGPointMake(251, 159.89))
        clip9Path.addLineToPoint(CGPointMake(251, 175))
        clip9Path.addCurveToPoint(CGPointMake(249, 177), controlPoint1: CGPointMake(251, 176.11), controlPoint2: CGPointMake(250.11, 177))
        clip9Path.addLineToPoint(CGPointMake(217, 177))
        clip9Path.addCurveToPoint(CGPointMake(215, 175), controlPoint1: CGPointMake(215.9, 177), controlPoint2: CGPointMake(215, 176.11))
        clip9Path.addLineToPoint(CGPointMake(215, 161))
        clip9Path.closePath()
        clip9Path.usesEvenOddFillRule = true;

        clip9Path.addClip()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(210, 154, 46, 28))
        fillColor11.setFill()
        rectanglePath.fill()


        //// Bezier 5 Drawing
        var bezier5Path = UIBezierPath()
        bezier5Path.moveToPoint(CGPointMake(234.45, 159))
        bezier5Path.addLineToPoint(CGPointMake(254.45, 159))
        bezier5Path.addLineToPoint(CGPointMake(254.45, 177))
        bezier5Path.addLineToPoint(CGPointMake(234.45, 177))
        bezier5Path.addCurveToPoint(CGPointMake(235, 168), controlPoint1: CGPointMake(234.81, 174.05), controlPoint2: CGPointMake(235, 171.05))
        bezier5Path.addCurveToPoint(CGPointMake(234.45, 159), controlPoint1: CGPointMake(235, 164.95), controlPoint2: CGPointMake(234.81, 161.95))
        bezier5Path.closePath()
        bezier5Path.usesEvenOddFillRule = true;

        fillColor12.setFill()
        bezier5Path.fill()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        //// DateInMonthLabel Drawing
        let dateInMonthLabelRect = CGRectMake(238, 161, 8.9, 13)
        let dateInMonthLabelStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        dateInMonthLabelStyle.alignment = NSTextAlignment.Center

        let dateInMonthLabelFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue", size: 8)!, NSForegroundColorAttributeName: textForeground, NSParagraphStyleAttributeName: dateInMonthLabelStyle]

        let dateInMonthLabelTextHeight: CGFloat = NSString(string: dateInMonth).boundingRectWithSize(CGSizeMake(dateInMonthLabelRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: dateInMonthLabelFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, dateInMonthLabelRect);
        NSString(string: dateInMonth).drawInRect(CGRectMake(dateInMonthLabelRect.minX, dateInMonthLabelRect.minY + (dateInMonthLabelRect.height - dateInMonthLabelTextHeight) / 2, dateInMonthLabelRect.width, dateInMonthLabelTextHeight), withAttributes: dateInMonthLabelFontAttributes)
        CGContextRestoreGState(context)


        //// DateInWeekLabel Drawing
        let dateInWeekLabelRect = CGRectMake(215, 160, 19, 14)
        let dateInWeekLabelStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        dateInWeekLabelStyle.alignment = NSTextAlignment.Center

        let dateInWeekLabelFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue", size: 8)!, NSForegroundColorAttributeName: textForeground2, NSParagraphStyleAttributeName: dateInWeekLabelStyle]

        let dateInWeekLabelTextHeight: CGFloat = NSString(string: dateInWeek).boundingRectWithSize(CGSizeMake(dateInWeekLabelRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: dateInWeekLabelFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, dateInWeekLabelRect);
        NSString(string: dateInWeek).drawInRect(CGRectMake(dateInWeekLabelRect.minX, dateInWeekLabelRect.minY + (dateInWeekLabelRect.height - dateInWeekLabelTextHeight) / 2, dateInWeekLabelRect.width, dateInWeekLabelTextHeight), withAttributes: dateInWeekLabelFontAttributes)
        CGContextRestoreGState(context)




        //// HourArrowGroup
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 162, 163)
        CGContextRotateCTM(context, -hourArrowAngle * CGFloat(M_PI) / 180)



        //// MinuteBezierGroup
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip 11
        var clip11Path = UIBezierPath()
        clip11Path.moveToPoint(CGPointMake(3.8, -10.28))
        clip11Path.addCurveToPoint(CGPointMake(10.48, 3.65), controlPoint1: CGPointMake(9.45, -8.25), controlPoint2: CGPointMake(12.44, -2.05))
        clip11Path.addCurveToPoint(CGPointMake(-3.5, 10.47), controlPoint1: CGPointMake(8.5, 9.39), controlPoint2: CGPointMake(2.24, 12.45))
        clip11Path.addCurveToPoint(CGPointMake(-10.32, -3.51), controlPoint1: CGPointMake(-9.25, 8.49), controlPoint2: CGPointMake(-12.3, 2.23))
        clip11Path.addCurveToPoint(CGPointMake(-3.89, -10.19), controlPoint1: CGPointMake(-9.23, -6.7), controlPoint2: CGPointMake(-6.81, -9.06))
        clip11Path.addLineToPoint(CGPointMake(-2.16, -61.24))
        clip11Path.addCurveToPoint(CGPointMake(-0.09, -63.24), controlPoint1: CGPointMake(-2.12, -62.34), controlPoint2: CGPointMake(-1.2, -63.24))
        clip11Path.addLineToPoint(CGPointMake(0.9, -63.24))
        clip11Path.addCurveToPoint(CGPointMake(2.94, -61.24), controlPoint1: CGPointMake(2.01, -63.24), controlPoint2: CGPointMake(2.92, -62.34))
        clip11Path.addLineToPoint(CGPointMake(3.8, -10.28))
        clip11Path.closePath()
        clip11Path.moveToPoint(CGPointMake(-1.23, 3.85))
        clip11Path.addCurveToPoint(CGPointMake(3.86, 1.37), controlPoint1: CGPointMake(0.86, 4.57), controlPoint2: CGPointMake(3.14, 3.46))
        clip11Path.addCurveToPoint(CGPointMake(1.38, -3.71), controlPoint1: CGPointMake(4.58, -0.72), controlPoint2: CGPointMake(3.47, -2.99))
        clip11Path.addCurveToPoint(CGPointMake(-3.71, -1.23), controlPoint1: CGPointMake(-0.71, -4.43), controlPoint2: CGPointMake(-2.99, -3.32))
        clip11Path.addCurveToPoint(CGPointMake(-1.23, 3.85), controlPoint1: CGPointMake(-4.42, 0.85), controlPoint2: CGPointMake(-3.31, 3.13))
        clip11Path.closePath()
        clip11Path.usesEvenOddFillRule = true;

        clip11Path.addClip()


        //// Rectangle 7 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 2.8, -25.05)
        CGContextRotateCTM(context, 19 * CGFloat(M_PI) / 180)

        let rectangle7Path = UIBezierPath(rect: CGRectMake(-21.58, -40.62, 43.15, 81.25))
        fillColor5.setFill()
        rectangle7Path.fill()

        CGContextRestoreGState(context)


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)



        CGContextRestoreGState(context)


        //// MinuteArrowGroup
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 162, 163.05)
        CGContextRotateCTM(context, -minuteArrowAngle * CGFloat(M_PI) / 180)



        //// MinuteArrowBezier Drawing
        var minuteArrowBezierPath = UIBezierPath()
        minuteArrowBezierPath.moveToPoint(CGPointMake(3.65, -5.6))
        minuteArrowBezierPath.addCurveToPoint(CGPointMake(6.39, -2.23), controlPoint1: CGPointMake(4.86, -4.82), controlPoint2: CGPointMake(5.83, -3.67))
        minuteArrowBezierPath.addCurveToPoint(CGPointMake(2.36, 6.81), controlPoint1: CGPointMake(7.77, 1.38), controlPoint2: CGPointMake(5.97, 5.43))
        minuteArrowBezierPath.addCurveToPoint(CGPointMake(-6.68, 2.79), controlPoint1: CGPointMake(-1.25, 8.2), controlPoint2: CGPointMake(-5.3, 6.4))
        minuteArrowBezierPath.addCurveToPoint(CGPointMake(-4.12, -5.49), controlPoint1: CGPointMake(-7.87, -0.3), controlPoint2: CGPointMake(-6.73, -3.7))
        minuteArrowBezierPath.addLineToPoint(CGPointMake(-2.27, -95.99))
        minuteArrowBezierPath.addCurveToPoint(CGPointMake(-0.23, -97.99), controlPoint1: CGPointMake(-2.25, -97.1), controlPoint2: CGPointMake(-1.34, -97.99))
        minuteArrowBezierPath.addCurveToPoint(CGPointMake(1.81, -95.99), controlPoint1: CGPointMake(0.87, -97.99), controlPoint2: CGPointMake(1.79, -97.1))
        minuteArrowBezierPath.addLineToPoint(CGPointMake(3.65, -5.6))
        minuteArrowBezierPath.addLineToPoint(CGPointMake(3.65, -5.6))
        minuteArrowBezierPath.closePath()
        minuteArrowBezierPath.usesEvenOddFillRule = true;

        fillColor6.setFill()
        minuteArrowBezierPath.fill()



        CGContextRestoreGState(context)


        //// SecondArrowGroup
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 162, 163)



        //// SecondArrowBezier Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 0, 0.05)
        CGContextRotateCTM(context, -secondArrowAngle * CGFloat(M_PI) / 180)

        var secondArrowBezierPath = UIBezierPath()
        secondArrowBezierPath.moveToPoint(CGPointMake(1.91, -3.56))
        secondArrowBezierPath.addCurveToPoint(CGPointMake(2.29, -3.33), controlPoint1: CGPointMake(2.04, -3.49), controlPoint2: CGPointMake(2.17, -3.41))
        secondArrowBezierPath.addCurveToPoint(CGPointMake(3.28, 2.24), controlPoint1: CGPointMake(4.1, -2.06), controlPoint2: CGPointMake(4.54, 0.43))
        secondArrowBezierPath.addCurveToPoint(CGPointMake(-2.29, 3.23), controlPoint1: CGPointMake(2.01, 4.05), controlPoint2: CGPointMake(-0.48, 4.49))
        secondArrowBezierPath.addCurveToPoint(CGPointMake(-3.28, -2.34), controlPoint1: CGPointMake(-4.1, 1.96), controlPoint2: CGPointMake(-4.54, -0.53))
        secondArrowBezierPath.addCurveToPoint(CGPointMake(-2.01, -3.51), controlPoint1: CGPointMake(-2.93, -2.84), controlPoint2: CGPointMake(-2.5, -3.23))
        secondArrowBezierPath.addLineToPoint(CGPointMake(-1.07, -89.15))
        secondArrowBezierPath.addCurveToPoint(CGPointMake(0.93, -91.13), controlPoint1: CGPointMake(-1.06, -90.24), controlPoint2: CGPointMake(-0.17, -91.13))
        secondArrowBezierPath.addLineToPoint(CGPointMake(-1.03, -91.13))
        secondArrowBezierPath.addCurveToPoint(CGPointMake(0.97, -89.15), controlPoint1: CGPointMake(0.07, -91.13), controlPoint2: CGPointMake(0.96, -90.25))
        secondArrowBezierPath.addLineToPoint(CGPointMake(1.91, -3.56))
        secondArrowBezierPath.addLineToPoint(CGPointMake(1.91, -3.56))
        secondArrowBezierPath.addLineToPoint(CGPointMake(1.91, -3.56))
        secondArrowBezierPath.closePath()
        secondArrowBezierPath.usesEvenOddFillRule = true;

        fillColor7.setFill()
        secondArrowBezierPath.fill()

        CGContextRestoreGState(context)



        CGContextRestoreGState(context)
    }

}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
